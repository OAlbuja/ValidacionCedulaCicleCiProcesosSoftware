version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.9 # Declaración del orb browser-tools

executors:
  frontend-executor:
    docker:
      - image: cimg/node:20.0.0
    working_directory: ~/repo/frontend # Usamos el directorio raíz del repo

  backend-executor:
    docker:
      - image: cimg/openjdk:17.0
    working_directory: ~/repo # Usamos el directorio raíz del repo

jobs:
  pre-build-frontend:
    executor: frontend-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias del frontend
          command: cd frontend && npm install
      - run:
          name: Análisis estático del código (ESLint)
          command: cd frontend && npm run lint
      - run:
          name: Auditoría de dependencias del frontend
          command: cd frontend && npm audit --audit-level=moderate || echo "Vulnerabilidades detectadas"

  pre-build-backend:
    executor: backend-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias del backend
          command: cd CedulaApi && mvn install -DskipTests
      - run:
          name: Análisis estático del código (Checkstyle)
          command: cd CedulaApi && mvn checkstyle:check
      - run:
          name: Verificar dependencias obsoletas en el backend
          command: cd CedulaApi && mvn versions:display-dependency-updates

  build-frontend:
    executor: frontend-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias
          command: cd frontend && npm install
      - run:
          name: Construir el frontend
          command: cd frontend && npx ng build --configuration=production

  build-backend:
    executor: backend-executor
    steps:
      - checkout
      - run:
          name: Compilar el backend
          command: cd CedulaApi && mvn clean package

  test-frontend:
    executor: frontend-executor
    steps:
      - checkout
      - browser-tools/install-chrome:
          replace-existing: true
      - run:
          name: Instalar dependencias
          command: cd frontend && npm install
      - run:
          name: Ejecutar pruebas unitarias del frontend
          command: cd frontend && npm run test -- --no-watch --no-progress --browsers=ChromeHeadless

  test-backend:
    docker:
      - image: cimg/openjdk:17.0
    working_directory: ~/repo
    environment:
      NVD_API_KEY: $NVD_API_KEY
    steps:
      - checkout
      - run:
          name: Ejecutar pruebas unitarias del backend
          command: cd CedulaApi && mvn test
      - run:
          name: Análisis de dependencias con OWASP Dependency-Check
          command: |
            cd CedulaApi
            mvn org.owasp:dependency-check-maven:check \
            -Ddependency-check.nvd.apiKey=${NVD_API_KEY}
  
    dast-scan:
      machine: true
      steps:
      - checkout
      - run:
          name: Construir imágenes Docker
          command: |
            docker-compose build
      - run:
          name: Levantar servicios con Docker Compose
          command: |
            docker-compose up -d
            sleep 15  # Esperar a que los servicios arranquen
      - run:
          name: Ejecutar OWASP ZAP
          command: |
            docker run --rm -v $(pwd):/zap/wrk:rw \
              --user $(id -u):$(id -g) \
              ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t http://host.docker.internal:8080 -r zap_report.html
      - store_artifacts:
          path: zap_report.html


  trivy-scan:
    machine: true
    steps:
      - checkout
      - run:
          name: Instalar Trivy
          command: |
            curl -sfL https://aquasecurity.github.io/trivy-repo/deb-install.sh | sh -
            apt-get install -y trivy
      - run:
          name: Levantar servicios con Docker Compose
          command: |
            docker-compose up -d
            sleep 15  # Esperar a que los servicios arranquen
      - run:
          name: Escanear contenedores con Trivy
          command: |
            trivy --exit-code 0 --severity HIGH,CRITICAL image mi-backend:latest > /tmp/trivy_backend_report.txt
            trivy --exit-code 0 --severity HIGH,CRITICAL image mi-frontend:latest > /tmp/trivy_frontend_report.txt
      - run:
          name: Verificar archivos en /tmp/
          command: ls -l /tmp/
      - store_artifacts:
          path: /tmp/trivy_backend_report.txt
          destination: backend-report
      - store_artifacts:
          path: /tmp/trivy_frontend_report.txt
          destination: frontend-report

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - pre-build-frontend
      - pre-build-backend
      - build-frontend:
          requires:
            - pre-build-frontend
      - build-backend:
          requires:
            - pre-build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - dast-scan:
          requires:
            - test-backend
      - trivy-scan:
          requires:
            - dast-scan

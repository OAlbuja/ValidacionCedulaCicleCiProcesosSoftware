version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.9

executors:
  frontend-executor:
    docker:
      - image: cimg/node:20.0.0
    working_directory: ~/repo/frontend

  backend-executor:
    docker:
      - image: cimg/openjdk:17.0
    working_directory: ~/repo

jobs:
  pre-build-frontend:
    executor: frontend-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias del frontend
          command: cd frontend && npm install
      - run:
          name: Análisis estático del código (ESLint)
          command: cd frontend && npm run lint
      - run:
          name: Auditoría de dependencias del frontend
          command: cd frontend && npm audit --audit-level=moderate || echo "Vulnerabilidades detectadas"

  pre-build-backend:
    executor: backend-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias del backend
          command: cd CedulaApi && mvn install -DskipTests
      - run:
          name: Análisis estático del código (Checkstyle)
          command: cd CedulaApi && mvn checkstyle:check
      - run:
          name: Verificar dependencias obsoletas en el backend
          command: cd CedulaApi && mvn versions:display-dependency-updates

  build-frontend:
    executor: frontend-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias
          command: cd frontend && npm install
      - run:
          name: Construir el frontend
          command: cd frontend && npx ng build --configuration=production

  build-backend:
    executor: backend-executor
    steps:
      - checkout
      - run:
          name: Compilar el backend
          command: cd CedulaApi && mvn clean package

  test-frontend:
    executor: frontend-executor
    steps:
      - checkout
      - browser-tools/install-chrome:
          replace-existing: true
      - run:
          name: Instalar dependencias
          command: cd frontend && npm install
      - run:
          name: Ejecutar pruebas unitarias del frontend
          command: cd frontend && npm run test -- --no-watch --no-progress --browsers=ChromeHeadless

  test-backend:
    docker:
      - image: cimg/openjdk:17.0
    working_directory: ~/repo
    environment:
      NVD_API_KEY: $NVD_API_KEY
    steps:
      - checkout
      - run:
          name: Ejecutar pruebas unitarias del backend
          command: cd CedulaApi && mvn test
      - run:
          name: Análisis de dependencias con OWASP Dependency-Check
          command: |
            cd CedulaApi
            mvn org.owasp:dependency-check-maven:check \
                -Ddependency-check.nvd.apiKey=${NVD_API_KEY}

  dast-scan:
    machine: true
    steps:
      - checkout
      - run:
          name: Instalar 'dos2unix' y convertir .yml a LF
          command: |
            sudo apt-get update
            sudo apt-get install -y dos2unix docker-compose
            find . -name "*.yml" -exec dos2unix {} \;
      - run:
          name: Crear red Docker
          command: docker network create app-network || true
      - run:
          name: Construir imágenes
          command: docker-compose build
      - run:
          name: Iniciar contenedores
          command: |
            docker-compose up -d
            echo "Esperando 50 segundos para inicialización..."  # Aumentado a 50s
            sleep 50
      - run:
          name: Verificar logs del backend
          command: docker logs backend-container
      - run:
          name: Esperar backend listo
          command: |  # Verificación con endpoint real
            echo "Verificando /api/cedulas/validar..."
            for i in {1..20}; do
              if curl -s "http://backend:8080/api/cedulas/validar?cedula=0931811087" | grep -q '"valida":'; then
                echo "Backend UP!"
                exit 0
              fi
              sleep 5
              echo "Intento $i/20..."
            done
            exit 1
      - run:
          name: Ejecutar ZAP
          command: |  # Comando corregido
            docker-compose run --rm \
              -v $(pwd):/zap/wrk \
              zap zap-baseline.py \
              -t http://backend:8080/api/cedulas/validar \
              -r /zap/wrk/zap_report.html \
              -J /zap/wrk/zap_report.json \
              -I -D 120
      - store_artifacts:
          path: zap_report.html
      - store_artifacts:
          path: zap_report.json




workflows:
  version: 2
  build-test-deploy:
    jobs:
      # Habilita lo que necesites según tu orden de build/test.
      # - pre-build-frontend
      # - pre-build-backend
      # - build-frontend:
      #     requires:
      #       - pre-build-frontend
      # - build-backend:
      #     requires:
      #       - pre-build-backend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      - dast-scan
          # requires:
          #   - test-backend
version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.9

executors:
  frontend-executor:
    docker:
      - image: cimg/node:20.0.0
    working_directory: ~/repo/frontend

  backend-executor:
    docker:
      - image: cimg/openjdk:17.0
    working_directory: ~/repo

jobs:
  ###########################
  # 1) PRE-BUILD FRONTEND
  ###########################
  pre-build-frontend:
    executor: frontend-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias del frontend
          command: cd frontend && npm install
      - run:
          name: Análisis estático del código (ESLint)
          command: cd frontend && npm run lint
      - run:
          name: Auditoría de dependencias del frontend
          command: cd frontend && npm audit --audit-level=moderate || echo "Vulnerabilidades detectadas"

  ###########################
  # 2) PRE-BUILD BACKEND
  ###########################
  pre-build-backend:
    executor: backend-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias del backend
          command: cd CedulaApi && mvn install -DskipTests
      - run:
          name: Análisis estático del código (Checkstyle)
          command: cd CedulaApi && mvn checkstyle:check
      - run:
          name: Verificar dependencias obsoletas en el backend
          command: cd CedulaApi && mvn versions:display-dependency-updates

  ###########################
  # 3) BUILD FRONTEND
  ###########################
  build-frontend:
    executor: frontend-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias
          command: cd frontend && npm install
      - run:
          name: Construir el frontend
          command: cd frontend && npx ng build --configuration=production

  ###########################
  # 4) BUILD BACKEND
  ###########################
  build-backend:
    executor: backend-executor
    steps:
      - checkout
      - run:
          name: Compilar el backend
          command: cd CedulaApi && mvn clean package

  ###########################
  # 5) TEST FRONTEND
  ###########################
  test-frontend:
    executor: frontend-executor
    steps:
      - checkout
      - browser-tools/install-chrome:
          replace-existing: true
      - run:
          name: Instalar dependencias
          command: cd frontend && npm install
      - run:
          name: Ejecutar pruebas unitarias del frontend
          command: cd frontend && npm run test -- --no-watch --no-progress --browsers=ChromeHeadless

  ###########################
  # 6) TEST BACKEND
  ###########################
  test-backend:
    docker:
      - image: cimg/openjdk:17.0
    working_directory: ~/repo
    environment:
      NVD_API_KEY: $NVD_API_KEY
    steps:
      - checkout
      - run:
          name: Ejecutar pruebas unitarias del backend
          command: cd CedulaApi && mvn test
      - run:
          name: Análisis de dependencias con OWASP Dependency-Check
          command: |
            cd CedulaApi
            mvn org.owasp:dependency-check-maven:check \
                -Ddependency-check.nvd.apiKey=${NVD_API_KEY}

  ###########################
  # 7) DAST-SCAN (ZAP)
  ###########################
  dast-scan:
    machine: true
    steps:
      - checkout
      - run:
          name: Instalar herramientas necesarias
          command: |
            sudo apt-get update
            sudo apt-get install -y docker-compose
      - run:
          name: Crear red Docker
          command: docker network create app-network || true
      - run:
          name: Construir imágenes Docker
          command: docker-compose build
      - run:
          name: Iniciar contenedores (solo backend si no tienes DB)
          command: |
            docker-compose up -d backend
            echo "Esperando 30s para iniciar..."
            sleep 30
      - run:
          name: Verificar logs del backend
          command: docker-compose logs backend
      - run:
          name: Verificar si el backend responde
          command: |
            for i in {1..15}; do
              if docker-compose run --rm backend curl -s -o /dev/null -w "%{http_code}" "http://backend:8080/api/cedulas/validar?cedula=1721544052" | grep -q "200"; then
                echo "✅ Backend está disponible!"
                exit 0
              fi
              echo "⏳ Intento $i/15 - Esperando backend..."
              sleep 5
            done
            echo "❌ ERROR: Backend no está respondiendo dentro de CircleCI"
            exit 1
      - run:
          name: Ejecutar escaneo con ZAP
          command: |
            docker-compose run --rm \
              -v $(pwd):/zap/wrk \
              zap zap-baseline.py \
              -t http://backend:8080/api/cedulas/validar \
              -r /zap/wrk/zap_report.html \
              -J /zap/wrk/zap_report.json \
              -I -D 60
      - store_artifacts:
          path: zap_report.html
      - store_artifacts:
          path: zap_report.json

#####################################
#         WORKFLOW (ORDEN)          #
#####################################
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - pre-build-frontend
      - pre-build-backend

      - build-frontend:
          requires:
            - pre-build-frontend

      - build-backend:
          requires:
            - pre-build-backend

      - test-frontend:
          requires:
            - build-frontend

      - test-backend:
          requires:
            - build-backend

      - dast-scan:
          requires:
            - test-backend

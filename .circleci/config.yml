version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.9 # Declaración del orb browser-tools

executors:
  frontend-executor:
    docker:
      - image: cimg/node:20.0.0
    working_directory: ~/repo/frontend # Usamos el directorio raíz del repo

  backend-executor:
    docker:
      - image: cimg/openjdk:17.0
    working_directory: ~/repo # Usamos el directorio raíz del repo

jobs:
  pre-build-frontend:
    executor: frontend-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias del frontend
          command: cd frontend && npm install
      - run:
          name: Análisis estático del código (ESLint)
          command: cd frontend && npm run lint
      - run:
          name: Auditoría de dependencias del frontend
          command: cd frontend && npm audit --audit-level=moderate || echo "Vulnerabilidades detectadas"

  pre-build-backend:
    executor: backend-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias del backend
          command: cd CedulaApi && mvn install -DskipTests
      - run:
          name: Análisis estático del código (Checkstyle)
          command: cd CedulaApi && mvn checkstyle:check
      - run:
          name: Verificar dependencias obsoletas en el backend
          command: cd CedulaApi && mvn versions:display-dependency-updates

  build-frontend:
    executor: frontend-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias
          command: cd frontend && npm install
      - run:
          name: Construir el frontend
          command: cd frontend && npx ng build --configuration=production

  build-backend:
    executor: backend-executor
    steps:
      - checkout
      - run:
          name: Compilar el backend
          command: cd CedulaApi && mvn clean package

  test-frontend:
    executor: frontend-executor
    steps:
      - checkout
      - browser-tools/install-chrome:
          replace-existing: true
      - run:
          name: Instalar dependencias
          command: cd frontend && npm install
      - run:
          name: Ejecutar pruebas unitarias del frontend
          command: cd frontend && npm run test -- --no-watch --no-progress --browsers=ChromeHeadless

  test-backend:
    docker:
      - image: cimg/openjdk:17.0
    working_directory: ~/repo
    environment:
      NVD_API_KEY: $NVD_API_KEY
    steps:
      - checkout
      - run:
          name: Ejecutar pruebas unitarias del backend
          command: cd CedulaApi && mvn test
      - run:
          name: Análisis de dependencias con OWASP Dependency-Check
          command: |
            cd CedulaApi
            mvn org.owasp:dependency-check-maven:check \
            -Ddependency-check.nvd.apiKey=${NVD_API_KEY}
  
  dast-scan:
    machine: true
    steps:
      - checkout
      - run:
          name: Crear red Docker si no existe
          command: docker network create app-network || true
      - run:
          name: Construir imágenes Docker de frontend y backend
          command: docker-compose build
      - run:
          name: Levantar contenedores de frontend y backend
          command: |
            docker-compose up -d
            sleep 20  # Espera a que la app arranque
      - run:
          name: Verificar que los contenedores están corriendo
          command: docker ps
      - run:
          name: Esperar a que el backend esté listo
          command: |
            echo "Esperando a que el backend responda..."
            for i in {1..30}; do
              if curl -s http://backend-container:8080 > /dev/null; then
                echo "Backend listo!"
                break
              fi
              echo "Backend aún no responde, esperando..."
              sleep 3
            done
      - run:
          name: Ejecutar OWASP ZAP en la red de Docker Compose
          command: |
            docker run --rm --network app-network \
              -v $(pwd):/zap/wrk \
              ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t http://backend-container:8080 -r /zap/wrk/zap_report.html
      - store_artifacts:
          path: zap_report.html




workflows:
  version: 2
  build-test-deploy:
    jobs:
      # - pre-build-frontend
      # - pre-build-backend
      # - build-frontend:
      #     requires:
      #       - pre-build-frontend
      # - build-backend:
      #     requires:
      #       - pre-build-backend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      - dast-scan
          # requires:
          #   - test-backend

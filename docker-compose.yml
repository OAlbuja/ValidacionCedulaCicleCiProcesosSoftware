version: '3.8'

networks:
  app-network:  # ðŸ”¹ Definir una red para los contenedores
    driver: bridge

services:
  backend:
    image: mi-backend:latest
    container_name: backend-container
    build:
      context: ./CedulaApi
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/mi_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
    depends_on:
      db:
        condition: service_healthy  # ðŸ”¹ Esperar hasta que MySQL estÃ© listo
    healthcheck:  # ðŸ”¹ Verificar que el backend estÃ© disponible antes de OWASP ZAP
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network  # ðŸ”¹ Conectar el backend a la red

  frontend:
    image: mi-frontend:latest
    container_name: frontend-container
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    depends_on:
      backend:
        condition: service_healthy  # ðŸ”¹ Esperar hasta que el backend estÃ© listo
    networks:
      - app-network  # ðŸ”¹ Conectar el frontend a la red

  db:
    image: mysql:latest
    container_name: mysql-container
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: mi_db
    ports:
      - "3306:3306"
    healthcheck:  # ðŸ”¹ Verificar que MySQL estÃ© listo antes del backend
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network  # ðŸ”¹ Conectar MySQL a la red
